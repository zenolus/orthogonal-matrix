{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","changeOrder","e","newOrder","Math","max","target","value","newMatrix","Array","i","fill","setState","order","matrix","changeValue","row","col","state","check","checkOrthogonal","result","render","className","type","onChange","style","paddingTop","display","map","rowIndex","val","colIndex","required","Button","variant","onClick","this","React","Component","j","sum","k","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oRAKMA,E,kDACL,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAUPC,YAAc,SAAAC,GAGb,IAFA,IAAIC,EAAWC,KAAKC,IAAIH,EAAEI,OAAOC,MAAO,GACpCC,EAAYC,MAAMN,GACbO,EAAI,EAAGA,EAAIP,EAAUO,IAC7BF,EAAUE,GAAKD,MAAMN,GAAUQ,KAAK,GACrC,EAAKC,SAAS,CAACC,MAAOV,EAAUW,OAAQN,KAhBvB,EAkBlBO,YAAc,SAACb,EAAGc,EAAKC,GACtB,IAAIT,EAAY,EAAKU,MAAMJ,OAC3BN,EAAUQ,GAAKC,GAAOf,EAAEI,OAAOC,OAAS,EACxC,EAAKK,SAAS,CAACE,OAAQN,KArBN,EAuBlBW,MAAQ,WACJC,EAAgB,EAAKF,MAAMJ,OAAQ,EAAKI,MAAML,OAChD,EAAKD,SAAS,CAACS,OAAQ,8BAEvB,EAAKT,SAAS,CAACS,OAAQ,mCA3BP,EA6BlBC,OAAS,kBACR,sBAAKC,UAAU,MAAf,UACC,qBAAKA,UAAY,SAAjB,SACC,+EAED,qBAAKA,UAAY,sBACjB,qBAAKA,UAAY,yBACjB,sBAAKA,UAAY,OAAjB,UACC,8BAAK,6BAAI,gEACT,uBAAOA,UAAY,QAAQC,KAAO,SAASjB,MAAS,EAAKW,MAAML,MAAOY,SAAY,EAAKxB,cACvF,qBAAKyB,MAAS,CAACC,WAAY,UAC3B,8BAAK,6BAAI,6DACT,uBAAOD,MAAS,CAACE,QAAS,SAA1B,SACE,EAAKV,MAAMJ,OAAOe,KAAI,SAACb,EAAKc,GAAN,OACtB,6BACEd,EAAIa,KAAI,SAACE,EAAKC,GAAN,OACR,uBAAOC,UAAQ,EAACV,UAAY,QAAQhB,MAASwB,EAAKP,KAAO,SAASC,SAAY,SAAAvB,GAAC,OAAI,EAAKa,YAAYb,EAAG4B,EAAUE,gBAKrH,cAACE,EAAA,EAAD,CAAQC,QAAU,QAAQC,QAAW,EAAKjB,MAA1C,+BACA,qBAAKO,MAAS,CAACC,WAAY,UAC1B,EAAKT,MAAMG,UAEb,qBAAKE,UAAY,SAAjB,2DApDD,EAAKL,MAAQ,CACZL,MAAO,EACPC,OAAQ,GACRO,OAAQ,IALQ,E,qDAQlB,WACCgB,KAAKpC,YAAY,CAACK,OAAQ,CAACC,MAAO,S,GAVlB+B,IAAMC,WA8DlBnB,EAAkB,SAACN,EAAQD,GAChC,IAAK,IAAIH,EAAI,EAAGA,EAAIG,EAAOH,IAC1B,IAAK,IAAI8B,EAAI,EAAGA,EAAI3B,EAAO2B,IAAI,CAE9B,IADA,IAAIC,EAAM,EACDC,EAAI,EAAGA,EAAI7B,EAAO6B,IAC1BD,GAAO3B,EAAOJ,GAAGgC,GAAK5B,EAAO0B,GAAGE,GACjC,GAAIhC,IAAM8B,GAAa,IAARC,GAAe/B,IAAM8B,GAAa,IAARC,EACxC,OAAO,EAGV,OAAO,GAGO1C,ICpEA4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS9B,OACP,cAAC,IAAM+B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0590f018.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\torder: 3,\n\t\t\tmatrix: [],\n\t\t\tresult: \"\"\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.changeOrder({target: {value: 3}})\n\t}\n\tchangeOrder = e => {\n\t\tlet newOrder = Math.max(e.target.value, 1)\n\t\tlet newMatrix = Array(newOrder)\n\t\tfor (var i = 0; i < newOrder; i++)\n\t\t\tnewMatrix[i] = Array(newOrder).fill(0)\n\t\tthis.setState({order: newOrder, matrix: newMatrix})\n\t}\n\tchangeValue = (e, row, col) => {\n\t\tlet newMatrix = this.state.matrix\n\t\tnewMatrix[row][col] = e.target.value || 0\n\t\tthis.setState({matrix: newMatrix})\n\t}\n\tcheck = () => {\n\t\tif(checkOrthogonal(this.state.matrix, this.state.order))\n\t\t\tthis.setState({result: \"The matrix IS orthogonal!\"})\n\t\telse\n\t\t\tthis.setState({result: \"The matrix IS NOT orthogonal!\"})\n\t}\n\trender = () => (\n\t\t<div className=\"App\">\n\t\t\t<div className = \"header\">\n\t\t\t\t<h3>Check whether a square matrix is orthogonal</h3>\n\t\t\t</div>\n\t\t\t<div className = \"background bg-top\" />\n\t\t\t<div className = \"background bg-bottom\" />\n\t\t\t<div className = \"body\">\n\t\t\t\t<div><h5><strong>Select Order of Matrix</strong></h5></div>\n\t\t\t\t<input className = \"order\" type = \"number\" value = {this.state.order} onChange = {this.changeOrder} />\n\t\t\t\t<div style = {{paddingTop: \"10px\"}}/>\n\t\t\t\t<div><h6><strong>Enter matrix values</strong></h6></div>\n\t\t\t\t<table style = {{display: \"block\"}}>\n\t\t\t\t\t{this.state.matrix.map((row, rowIndex) => (\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{row.map((val, colIndex) => (\n\t\t\t\t\t\t\t\t<input required className = \"value\" value = {val} type = \"number\" onChange = {e => this.changeValue(e, rowIndex, colIndex)} />\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</table>\n\t\t\t\t<Button variant = \"light\" onClick = {this.check}>Is it orthogonal?</Button>\n\t\t\t\t<div style = {{paddingTop: \"10px\"}}/>\n\t\t\t\t{this.state.result}\n\t\t\t</div>\n\t\t\t<div className = \"footer\">\n\t\t\t\tPrepared by Nishith G. Behera (118EE0277)\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst checkOrthogonal = (matrix, order) => {\n\tfor (var i = 0; i < order; i++){\n\t\tfor (var j = 0; j < order; j++){\n\t\t\tvar sum = 0;\n\t\t\tfor (var k = 0; k < order; k++)\n\t\t\t\tsum += matrix[i][k] * matrix[j][k];\n\t\t\tif((i === j && sum !== 1) || (i !== j && sum !== 0))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}